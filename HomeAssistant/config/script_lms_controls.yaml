###  Last Edit:  August 5, 2018
###         - Added capability to sync / unsync players via dialogflow
###  lms_control script: - Logitech Media Server primary control script for use with Google Dialog Flow project "LMS Controls"
###     - sets the variables from google dialog flow
###     - calls up the proper LMS control subscript based on intentName from google dialog flow project
###

lms_control:
  alias:  'LMS Controls for use with Google Dialog Flow'
  sequence:

###  The following can be used to create a notification in HA to show your voice command JSON from DialogFlow
###  Note: in configuration.yaml the input_text for lms_p3 needs to have max:500 entry to accomodate the size of some commands.
#    - service: input_text.set_value
#      data_template:
#        entity_id: input_text.lms_p3
#        value: "{{queryResult.parameters}}"
#    - service: persistent_notification.create
#      data:
#            message: "{{states.input_text.lms_p3.state}}"
#            title: "Voice Command"


# Set intent lms_command
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_command_intent
        value: "{{queryResult.parameters.lms_command}}"
# Set player
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_player}}"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.lms_player
        option: >
            {% if (states.input_text.lms_p3.state == '') %} {{states.input_select.lms_player.state}}
            {% else %} {{states.input_text.lms_p3.state}} {% endif %}
# Set source (filter for empty)
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_source}}"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.lms_source
        option: >
            {% if (states.input_text.lms_p3.state == '') %} {{states.input_select.lms_source.state}}
            {% else %} {{states.input_text.lms_p3.state}} {% endif %}
# Set shuffle
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_shuffle}}"
    - service_template: >
             {% if ((states.input_text.lms_p3.state == '') and (states.input_boolean.lms_shuffle.state == "on")) %} input_boolean.turn_on
             {% elif ((states.input_text.lms_p3.state == '') and (states.input_boolean.lms_shuffle.state == "off")) %} input_boolean.turn_off
             {% elif (states.input_text.lms_p3.state == 'on') %} input_boolean.turn_on
             {% elif (states.input_text.lms_p3.state == 'off') %} input_boolean.turn_off
             {% endif %}
      entity_id: input_boolean.lms_shuffle
# Set Repeat
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_repeat}}"
    - service_template: >
             {% if ((states.input_text.lms_p3.state == '') and (states.input_boolean.lms_repeat.state == "on")) %} input_boolean.turn_on
             {% elif ((states.input_text.lms_p3.state == '') and (states.input_boolean.lms_repeat.state == "off")) %} input_boolean.turn_off
             {% elif (states.input_text.lms_p3.state == 'on') %} input_boolean.turn_on
             {% elif (states.input_text.lms_p3.state == 'off') %} input_boolean.turn_off
             {% endif %}
      entity_id: input_boolean.lms_repeat
# Set artist
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_artist
        value: "{{queryResult.parameters.lms_artist}}"
# Set album
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_album
        value: "{{queryResult.parameters.lms_album}}"
# Set song
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_song
        value: "{{queryResult.parameters.lms_song}}"
# Set playlist
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_playlist
        value: "{{queryResult.parameters.lms_playlist}}"
# Set volume (filter for empty)
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_volume}}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.lms_volume
        value: >
            {% if (states.input_text.lms_p3.state == '') %} {{states.input_number.lms_volume.state}}
            {% else %} {{states.input_text.lms_p3.state}} {% endif %}
# Set sleep time (filter for empty)
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_sleep_time}}"
    - service: input_number.set_value
      data_template:
        entity_id: input_number.lms_sleep_time
        value: >
            {% if (states.input_text.lms_p3.state == '') %} {{states.input_number.lms_sleep_time.state}}
            {% else %} {{states.input_text.lms_p3.state}} {% endif %}

# Set Master Player
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p3
        value: "{{queryResult.parameters.lms_master_player}}"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.lms_sync_master
        option: >
            {% if (states.input_text.lms_p3.state == '') %} {{states.input_select.lms_sync_master.state}}
            {% else %} {{states.input_text.lms_p3.state}} {% endif %}

# Set Sync Player - Uses input_text.lms_p1 so be sure to make this the last set command no to overwrite p1.
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: "{{queryResult.parameters.lms_sync_player}}"
    - service: input_select.select_option
      data_template:
        entity_id: input_select.lms_sync_player
        option: >
            {% if (states.input_text.lms_p1.state == '') %} none
            {% endif %}

### check lms_command and call appropriate script
    - service: script.turn_on
      data_template:
        entity_id: >-
            {% if (queryResult.parameters.lms_command == "next track") %}
              script.lms_cmd_next_track
            {% elif (queryResult.parameters.lms_command == "pause player") %}
              script.lms_cmd_pause_player
            {% elif (queryResult.parameters.lms_command == "start player") %}
              script.lms_cmd_start_player
            {% elif ((queryResult.parameters.lms_command == "play song") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_play_song
            {% elif ((queryResult.parameters.lms_command == "play song") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_play_song_spot  
            {% elif ((queryResult.parameters.lms_command == "play playlist") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_play_playlist
            {% elif ((queryResult.parameters.lms_command == "play playlist") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_play_playlist_spot
            {% elif ((queryResult.parameters.lms_command == "play artist") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_play_artist
            {% elif ((queryResult.parameters.lms_command == "play artist") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_play_artist_spot
            {% elif ((queryResult.parameters.lms_command == "play album") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_play_album
            {% elif ((queryResult.parameters.lms_command == "play album") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_play_album_spot
            {% elif ((queryResult.parameters.lms_command == "add album") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_add_album
            {% elif ((queryResult.parameters.lms_command == "add album") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_add_album_spot
            {% elif ((queryResult.parameters.lms_command == "add artist") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_add_artist
            {% elif ((queryResult.parameters.lms_command == "add artist") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_add_artist_spot
            {% elif ((queryResult.parameters.lms_command == "add song") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_add_song
            {% elif ((queryResult.parameters.lms_command == "add song") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_add_song_spot
            {% elif ((queryResult.parameters.lms_command == "add playlist") and (states.input_select.lms_source.state == "lms")) %}
              script.lms_cmd_add_playlist
            {% elif ((queryResult.parameters.lms_command == "add playlist") and (states.input_select.lms_source.state == "spotify")) %}
              script.lms_cmd_add_playlist_spot
            {% elif (queryResult.parameters.lms_command == "play radio") %}
              script.lms_cmd_play_radio
            {% elif (queryResult.parameters.lms_command == "sync one") %}
              script.lms_cmd_sync_one
            {% elif (queryResult.parameters.lms_command == "sync all") %}
              script.lms_cmd_sync_all
            {% elif (queryResult.parameters.lms_command == "unsync one") %}
              script.lms_cmd_unsync_one
            {% elif (queryResult.parameters.lms_command == "unsync all") %}
              script.lms_cmd_unsync_all
            {% else %}
              script.lms_do_nothing
            {% endif %}

lms_do_nothing:
  alias:  "LMS command to play LMS song"
  sequence:
    - delay: 00:00:01

lms_cmd_play_song:
  alias:  "LMS command to play LMS song"
  sequence:
    - service: shell_command.lms_qry_alb_song
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "_{{states.input_text.lms_album.state | replace(' ','_')}}"
        text3: "{{states.input_text.lms_song.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.song_id.state == "0") %} loadtracks           
            {% else %} cmd:load
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.song_id.state == "0") %} track.titlesearch={{states.variable.var_lms_song.state}}           
            {% else %} track_id:{{states.sensor.song_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.song_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_play_song_spot:
  alias:  "LMS command to play Spotify song"
  sequence:
    - service: shell_command.lms_spot_art_alb_song
      data_template:
        text3: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text1: "{{states.input_text.lms_song.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_song:
  alias:  "LMS command to add LMS song to the queue"
  sequence:
    - service: shell_command.lms_qry_alb_song
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "_{{states.input_text.lms_album.state | replace(' ','_')}}"
        text3: "{{states.input_text.lms_song.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.song_id.state == "0") %} addtracks           
            {% else %} cmd:add
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.song_id.state == "0") %} track.titlesearch={{states.variable.var_lms_song.state}}           
            {% else %} track_id:{{states.sensor.song_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.song_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_add_song_spot:
  alias:  "LMS command to add Spotify song to the queue"
  sequence:
    - service: script.turn_on
      data_template:
        entity_id: script.lms_cmd_shuffle
    - service: shell_command.lms_spot_art_alb_song
      data_template:
        text3: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text1: "{{states.input_text.lms_song.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_playlist:
  alias:  "LMS command to play LMS playlist"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play",'{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']
    
lms_cmd_play_playlist_spot:
  alias:  "LMS command to play Spotify playlist"
  sequence:
    - service: shell_command.lms_spot_playlist
      data_template:
        text1: "{{states.input_text.lms_playlist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_playlist:
  alias:  "LMS command to add LMS playlist to the queue"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add",'{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']

lms_cmd_add_playlist_spot:
  alias:  "LMS command to add Spotify playlist"
  sequence:
    - service: shell_command.lms_spot_playlist
      data_template:
        text1: "{{states.input_text.lms_playlist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_artist:
  alias:  "LMS command to play LMS artist"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["loadtracks","contributor.namesearch={{states.input_text.lms_artist.state}}"]

lms_cmd_play_artist_spot:
  alias:  "LMS command to play Spotify artist"
  sequence:
    - service: shell_command.lms_spot_art
      data_template:
        text1: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_artist:
  alias:  "LMS command to add LMS artist to the queue"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["addtracks","contributor.namesearch={{states.input_text.lms_artist.state}}"]

lms_cmd_add_artist_spot:
  alias:  "LMS command to add LMS artist to the queue"
  sequence:
    - service: shell_command.lms_spot_art
      data_template:
        text1: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_play_album:
  alias:  "LMS command to play LMS album"
  sequence:
    - service: shell_command.lms_qry_alb
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.alb_id.state == "0") %} loadtracks           
            {% else %} cmd:load
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.alb_id.state == "0") %} album.titlesearch={{states.variable.var_lms_album.state}}           
            {% else %} album_id:{{states.sensor.alb_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.alb_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_play_album_spot:
  alias:  "LMS command to play Spotify album"
  sequence:
    - service: shell_command.lms_spot_art_alb
      data_template:
        text1: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play","{{states.sensor.spotify_uri.state}}"]

lms_cmd_add_album:
  alias:  "LMS command to add LMS album to the queue"
  sequence:
    - service: shell_command.lms_qry_alb
      data_template:
        text1: "_{{states.input_text.lms_artist.state | replace(' ','_')}}"
        text2: "{{states.input_text.lms_album.state | replace(' ','_')}}"
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p1
        value: >
            {% if (states.sensor.alb_id.state == "0") %} addtracks           
            {% else %} cmd:add
            {% endif %}
    - service: input_text.set_value
      data_template:
        entity_id: input_text.lms_p2
        value: >
            {% if (states.sensor.alb_id.state == "0") %} album.titlesearch={{states.variable.var_lms_album.state}}           
            {% else %} album_id:{{states.sensor.alb_id.state}}
            {% endif %}
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: >
            {% if (states.sensor.alb_id.state == "0") %} playlist
            {% else %} playlistcontrol
            {% endif %}
        parameters: ["{{states.input_text.lms_p1.state}}","{{states.input_text.lms_p2.state}}"]

lms_cmd_add_album_spot:
  alias:  "LMS command to add LMS album to the queue"
  sequence:
    - service: shell_command.lms_spot_art_alb
      data_template:
        text1: "{{states.input_text.lms_album.state | replace(' ','+')}}"
        text2: "{{states.input_text.lms_artist.state | replace(' ','+')}}"
    - service:  media_player.squeezebox_call_method
      data_template: 
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["add","{{states.sensor.spotify_uri.state}}"]

lms_cmd_next_track:
  alias:  "LMS command to advance to the next track"
  sequence:
    - service:  media_player.media_next_track
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        
lms_cmd_pause_player:
  alias:  "LMS command to pause a media player"
  sequence:
    - service:  media_player.media_pause
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"

lms_cmd_start_player:
  alias:  "LMS command to re-start a media player"
  sequence:
    - service:  media_player.turn_on
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
    - service:  media_player.media_play
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"

lms_cmd_play_radio:
  alias:  "LMS command to play radio station"
  sequence:
    - service:  media_player.squeezebox_call_method
      data_template:
        entity_id: "media_player.{{states.input_select.lms_player.state}}"
        command: playlist
        parameters: ["play",'Radio_{{states.input_text.lms_playlist.state|title|trim|replace(" ","_")}}']

lms_cmd_sync_one:
  alias: "LMS command to Sync One Player to the Master"
  sequence:
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
            {% if (states.input_boolean.lms_player1_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player1_sync
            {% elif (states.input_boolean.lms_player2_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player2_sync
            {% elif (states.input_boolean.lms_player3_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player3_sync
            {% elif (states.input_boolean.lms_player4_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player4_sync
            {% elif (states.input_boolean.lms_player5_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player5_sync
            {% endif %}

lms_cmd_sync_all:
  alias: "LMS command to Sync All Players to the Master"
  sequence:
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
            {% if (states.input_text.lms_command_intent.state == "sync all") %} 
                input_boolean.lms_player1_sync, input_boolean.lms_player2_sync, input_boolean.lms_player3_sync, input_boolean.lms_player4_sync, input_boolean.lms_player5_sync
            {% endif %}
    
lms_cmd_unsync_one:
  alias: "LMS command to Un-Sync One Player from the Master"
  sequence:
    - service: input_boolean.turn_off
      data_template:
        entity_id: >
            {% if (states.input_boolean.lms_player1_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player1_sync
            {% elif (states.input_boolean.lms_player2_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player2_sync
            {% elif (states.input_boolean.lms_player3_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player3_sync
            {% elif (states.input_boolean.lms_player4_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player4_sync
            {% elif (states.input_boolean.lms_player5_sync.name == states.input_text.lms_p1.state) %} input_boolean.lms_player5_sync
            {% endif %}

lms_cmd_unsync_all:
  alias: "LMS command to Un-Sync All Players from the Master"
  sequence:
    - service: input_boolean.turn_off
      data_template:
        entity_id: >
            {% if (states.input_text.lms_command_intent.state == "unsync all") %} 
                input_boolean.lms_player1_sync, input_boolean.lms_player2_sync, input_boolean.lms_player3_sync, input_boolean.lms_player4_sync, input_boolean.lms_player5_sync
            {% endif %}
  
  

###     This concludes the section that is associated with LMS Controls application
###     associated with Google Dialog Flow project "LMS Commander"
